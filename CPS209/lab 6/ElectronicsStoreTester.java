/**
 * Tests the different components of an ElectronicsStore. DO NOT EDIT THIS FILE.
 */
public class ElectronicsStoreTester
{

    public static void main(String[] args)
    {
        System.out.println("------ TEST 1: Test that toString works correctly ------");
        TV tv1 = new TV("LG Smart TV", TV.Type.LED, 45.0);
        tv1.addStock(50);
        runToStringTest(tv1, "Model: LG Smart TV, Stock: 50, Type: LED, Screen Size: 45.0");

        TV tv2 = new TV("LG Smart TV", TV.Type.LED, 45.0);
        tv2.addStock(100);
        runToStringTest(tv2, "Model: LG Smart TV, Stock: 100, Type: LED, Screen Size: 45.0");

        TV tv3 = new TV("Sony Bravia", TV.Type.OLED, 55.0);
        runToStringTest(tv3, "Model: Sony Bravia, Stock: 0, Type: OLED, Screen Size: 55.0");

        Computer c1 = new Computer("Macbook Pro", 13, 16, 256);
        c1.addStock(25);
        runToStringTest(c1, "Model: Macbook Pro, Stock: 25, Screen Size: 13.0, RAM: 16.0, hdSpace: 256.0");

        Computer c2 = new Computer("Macbook Pro", 13, 16, 128);
        c2.addStock(35);
        runToStringTest(c2, "Model: Macbook Pro, Stock: 35, Screen Size: 13.0, RAM: 16.0, hdSpace: 128.0");

        Computer c3 = new Computer("Dell XPS", 13, 16, 256);
        runToStringTest(c3, "Model: Dell XPS, Stock: 0, Screen Size: 13.0, RAM: 16.0, hdSpace: 256.0");

        Computer c4 = new Computer("Macbook Pro", 13, 16, 128);
        runToStringTest(c4, "Model: Macbook Pro, Stock: 0, Screen Size: 13.0, RAM: 16.0, hdSpace: 128.0");

        tv3.addStock(75);
        c3.addStock(67);
        c4.addStock(32);

        System.out.println("\n------ TEST 2: Check equals ------");
        runEqualsTest(tv1, tv2, true);
        runEqualsTest(tv2, tv1, true);
        runEqualsTest(tv2, tv3, false);
        runEqualsTest(tv3, tv2, false);

        runEqualsTest(c1, c2, false);
        runEqualsTest(c1, c4, false);
        runEqualsTest(c2, c4, true);
        runEqualsTest(c1, c3, false);


        System.out.println("\n------ TEST 3: Check Store Initialization ------");
        ElectronicsStore store = new ElectronicsStore();

        runGetDifferentProductsTest(store, 0, 0);

        System.out.println("\n------ TEST 4: Add Unique TVs and Computers ------");
        System.out.println("Add to stock:");
        System.out.println("\t" + tv1);
        System.out.println("\t" + tv3);
        System.out.println("\t" + c1);
        System.out.println("\t" + c2);
        System.out.println("\t" + c3);

        // add products
        store.addTVStock(tv1);
        store.addTVStock(tv3);

        store.addComputerStock(c1);
        store.addComputerStock(c2);
        store.addComputerStock(c3);

        runGetDifferentProductsTest(store, 2, 3);
        System.out.println("Get first TV");
        runToStringTest(store.getTV(0), "Model: LG Smart TV, Stock: 50, Type: LED, Screen Size: 45.0");

        System.out.println("Get second TV");
        runToStringTest(store.getTV(1), "Model: Sony Bravia, Stock: 75, Type: OLED, Screen Size: 55.0");

        System.out.println("Get first computer");
        runToStringTest(store.getComputer(0), "Model: Macbook Pro, Stock: 25, Screen Size: 13.0, RAM: 16.0, hdSpace: 256.0");

        System.out.println("Get second computer");
        runToStringTest(store.getComputer(1), "Model: Macbook Pro, Stock: 35, Screen Size: 13.0, RAM: 16.0, hdSpace: 128.0");

        System.out.println("Get third computer");
        runToStringTest(store.getComputer(2), "Model: Dell XPS, Stock: 67, Screen Size: 13.0, RAM: 16.0, hdSpace: 256.0");


        System.out.println("\n------ TEST 5: Add Existing TVs and Computers ------");
        System.out.println("Add to stock: " + tv2);

        store.addTVStock(tv2);
        runGetDifferentProductsTest(store, 2, 3);
        System.out.println("Get first TV");
        runToStringTest(store.getTV(0), "Model: LG Smart TV, Stock: 150, Type: LED, Screen Size: 45.0");

        System.out.println("Get second TV");
        runToStringTest(store.getTV(1), "Model: Sony Bravia, Stock: 75, Type: OLED, Screen Size: 55.0");


        System.out.println("Add to stock: " + c4);
        store.addComputerStock(c4);
        runGetDifferentProductsTest(store, 2, 3);

        System.out.println("Get first computer");
        runToStringTest(store.getComputer(0), "Model: Macbook Pro, Stock: 25, Screen Size: 13.0, RAM: 16.0, hdSpace: 256.0");

        System.out.println("Get second computer");
        runToStringTest(store.getComputer(1), "Model: Macbook Pro, Stock: 67, Screen Size: 13.0, RAM: 16.0, hdSpace: 128.0");

        System.out.println("Get third computer");
        runToStringTest(store.getComputer(2), "Model: Dell XPS, Stock: 67, Screen Size: 13.0, RAM: 16.0, hdSpace: 256.0");


        System.out.println("------ TEST 6: Make Sure Are Copying Products In AddToStock ------");
        System.out.println("The original TV and Computer objects should not have been changed when they are added to the store");

        runToStringTest(tv1, "Model: LG Smart TV, Stock: 50, Type: LED, Screen Size: 45.0");
        runToStringTest(c2, "Model: Macbook Pro, Stock: 35, Screen Size: 13.0, RAM: 16.0, hdSpace: 128.0");
    }

    public static void runToStringTest(ElectronicsProduct product, String expected)
    {
        String output = product.toString();
        printTestResult(testStringOutput("toString", output, expected));

    }

    public static void runEqualsTest(ElectronicsProduct p1, ElectronicsProduct p2, boolean expected)
    {
        System.out.println("Comparing [" + p1 + "] and [" + p2 + "]");
        boolean output = p1.equals(p2);
        printTestResult(testBooleanOutput("equals", output, expected));
    }

    public static void runGetDifferentProductsTest(ElectronicsStore store, int expectedTVs, int expectedComputers)
    {
        int outTV = store.getNumberDifferentTVs();

        boolean pass = true;

        if (!testIntOutput("getNumberDifferentTVs", outTV, expectedTVs)) {
            pass = false;
        }
        int outComp = store.getNumberDifferentComputers();
        if (!testIntOutput("getNumberDifferentComputers", outComp, expectedComputers)) {
            pass = false;
        }

        printTestResult(pass);
    }

    public static void printTestResult(boolean pass)
    {
        if (pass) {
            System.out.println("*** TEST PASSES ***\n");
        } else {
            System.out.println("*******************************************");
            System.out.println("*************** TEST FAILED ***************");
            System.out.println("*******************************************\n");
        }
    }

    public static boolean testStringOutput(String methodName, String output, String expected)
    {
        System.out.println("OUTPUT of " + methodName + ":   " + output);
        if (!output.equals(expected)) {
            System.out.println("EXPECTED of " + methodName + ": " + expected);
            System.out.println("    INCORRECT OUTPUT");
            return false;
        }
        return true;
    }

    public static boolean testBooleanOutput(String methodName, boolean output, boolean expected)
    {
        System.out.println("OUTPUT of " + methodName + ":   " + output);
        if (output != expected) {
            System.out.println("EXPECTED of " + methodName + ": " + expected);
            System.out.println("    INCORRECT OUTPUT");
            return false;
        }
        return true;
    }

    public static boolean testIntOutput(String methodName, int output, int expected)
    {
        System.out.println("OUTPUT of " + methodName + ":   " + output);
        if (output != expected) {
            System.out.println("EXPECTED of " + methodName + ": " + expected);
            System.out.println("    INCORRECT OUTPUT");
            return false;
        }
        return true;
    }
}
